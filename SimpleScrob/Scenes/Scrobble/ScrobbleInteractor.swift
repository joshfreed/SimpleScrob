//
//  ScrobbleInteractor.swift
//  SimpleScrob
//
//  Created by Josh Freed on 9/30/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MediaPlayer
import os.log

protocol ScrobbleBusinessLogic {
    func refresh(request: Scrobble.Refresh.Request)
    func requestMediaLibraryAuthorization()
    func initializeMusicLibrary(request: Scrobble.InitializeMusicLibrary.Request)
    func searchForNewScrobbles(request: Scrobble.SearchForNewScrobbles.Request)
    func submitScrobbles(request: Scrobble.SubmitScrobbles.Request)
    func getCurrentUser()
    func signOut(request: Scrobble.SignOut.Request)
}

protocol ScrobbleDataStore {
    
}

class ScrobbleInteractor: ScrobbleBusinessLogic, ScrobbleDataStore {
    var presenter: ScrobblePresentationLogic?
    let logger = OSLog(subsystem: "com.joshfreed.SimpleScrob", category: "ScrobbleInteractor")
    let mediaLibrary: MediaLibrary
    let lastFM: LastFMService
    let database: Database
    let songScanner: SongScanner

    private var songsToScrobble: [Song] = []
    
    init(
        mediaLibrary: MediaLibrary,
        lastFM: LastFMService,
        database: Database,
        songScanner: SongScanner
    ) {
        self.mediaLibrary = mediaLibrary
        self.lastFM = lastFM
        self.database = database
        self.songScanner = songScanner
    }
    
    // MARK: Refresh

    func refresh(request: Scrobble.Refresh.Request) {
        os_log("refresh", log: logger, type: .debug)
        
        if mediaLibrary.isAuthorized() {
            os_log("presentAuthorized", log: logger, type: .debug)
            let response = Scrobble.Refresh.Response(firstTime: !songScanner.isInitialized)
            presenter?.presentAuthorized(response: response)
        } else if mediaLibrary.authorizationDenied() {
            os_log("presentAuthorizationDenied", log: logger, type: .debug)
            presenter?.presentAuthorizationDenied()
        } else {
            os_log("presentAuthorizationPrimer", log: logger, type: .debug)
            presenter?.presentAuthorizationPrimer()
        }
    }
    
    // MARK: Request media library authorization
    
    func requestMediaLibraryAuthorization() {
        MPMediaLibrary.requestAuthorization { status in
            DispatchQueue.main.sync {
                switch status {
                case .authorized:
                    let response = Scrobble.Refresh.Response(firstTime: !self.songScanner.isInitialized)
                    self.presenter?.presentAuthorized(response: response)
                case .denied: self.presenter?.presentAuthorizationDenied()
                case .notDetermined: break
                case .restricted: break
                }
            }
        }
    }
    
    // MARK: Initialize music library
    
    func initializeMusicLibrary(request: Scrobble.InitializeMusicLibrary.Request) {
        presenter?.presentScanningMusicLibrary()
        
        DispatchQueue.global(qos: .background).async {
            self.songScanner.initializeSongDatabase()
            
            DispatchQueue.main.sync {
                self.presenter?.presentCurrentUser(response: Scrobble.GetCurrentUser.Response(user: self.lastFM.currentUser))
                self.presenter?.presentLibraryScanComplete(response: Scrobble.InitializeMusicLibrary.Response())
            }
        }
    }
    
    // MARK: Search for new scrobbles
    
    func searchForNewScrobbles(request: Scrobble.SearchForNewScrobbles.Request) {
        presenter?.presentCurrentUser(response: Scrobble.GetCurrentUser.Response(user: self.lastFM.currentUser))
        presenter?.presentSearchingForNewScrobbles()
        
        DispatchQueue.global(qos: .background).async {
            self.songsToScrobble = self.songScanner.searchForNewScrobbles()
            
            DispatchQueue.main.sync {
                let response = Scrobble.SearchForNewScrobbles.Response(songs: self.songsToScrobble)
                self.presenter?.presentSongsToScrobble(response: response)
            }
        }
    }
    
    // MARK: Submit scrobbles
    
    func submitScrobbles(request: Scrobble.SubmitScrobbles.Request) {
        guard songsToScrobble.count > 0, lastFM.isLoggedIn else {
            return
        }
        
        presenter?.presentSubmittingToLastFM()
        
        lastFM.submit(songs: songsToScrobble) {
            self.database.save(self.songsToScrobble)
            self.songsToScrobble = []
            self.presenter?.presentScrobblingComplete()            
        }
    }
    
    // MARK: Get current user
    
    func getCurrentUser() {
        let response = Scrobble.GetCurrentUser.Response(user: lastFM.currentUser)
        presenter?.presentCurrentUser(response: response)
        
        if lastFM.currentUser != nil && songsToScrobble.count > 0 {
            let request = Scrobble.SubmitScrobbles.Request()
            submitScrobbles(request: request)
        }
    }
    
    // MARK: Sign Out
    
    func signOut(request: Scrobble.SignOut.Request) {
        lastFM.signOut()
        
        let response = Scrobble.GetCurrentUser.Response(user: lastFM.currentUser)
        presenter?.presentCurrentUser(response: response)
    }
}
