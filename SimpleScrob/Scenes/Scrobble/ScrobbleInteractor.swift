//
//  ScrobbleInteractor.swift
//  SimpleScrob
//
//  Created by Josh Freed on 9/30/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ScrobbleBusinessLogic {
    func refresh(request: Scrobble.Refresh.Request)
    func initializeMusicLibrary(request: Scrobble.InitializeMusicLibrary.Request)
    func searchForNewScrobbles(request: Scrobble.SearchForNewScrobbles.Request)
    func submitScrobbles(request: Scrobble.SubmitScrobbles.Request)
    func getCurrentUser()
}

protocol ScrobbleDataStore {
    
}

class ScrobbleInteractor: ScrobbleBusinessLogic, ScrobbleDataStore {
    var presenter: ScrobblePresentationLogic?
    let mediaLibrary: MediaLibrary
    let lastFM: LastFM
    let database: Database

    init(mediaLibrary: MediaLibrary, lastFM: LastFM, database: Database) {
        self.mediaLibrary = mediaLibrary
        self.lastFM = lastFM
        self.database = database
    }
    
    // MARK: Refresh

    func refresh(request: Scrobble.Refresh.Request) {
        if mediaLibrary.isAuthorized() {
            let response = Scrobble.Refresh.Response(firstTime: !mediaLibrary.isInitialized)
            presenter?.presentAuthorized(response: response)
        } else if mediaLibrary.authorizationDenied() {
            presenter?.presentAuthorizationDenied()
        } else {
            presenter?.presentAuthorizationPrimer()
        }
    }
    
    // MARK: Initialize music library
    
    func initializeMusicLibrary(request: Scrobble.InitializeMusicLibrary.Request) {
        presenter?.presentScanningMusicLibrary()
        
        mediaLibrary.scanMediaLibrary {
            self.presenter?.presentCurrentUser(response: Scrobble.GetCurrentUser.Response(user: self.lastFM.currentUser))
            self.presenter?.presentLibraryScanComplete(response: Scrobble.InitializeMusicLibrary.Response())
        }
    }
    
    // MARK: Search for new scrobbles
    
    func searchForNewScrobbles(request: Scrobble.SearchForNewScrobbles.Request) {
        presenter?.presentCurrentUser(response: Scrobble.GetCurrentUser.Response(user: self.lastFM.currentUser))
        presenter?.presentSearchingForNewScrobbles()
        
        mediaLibrary.searchForNewScrobbles { songs in
            let response = Scrobble.SearchForNewScrobbles.Response(songs: songs)
            self.presenter?.presentSongsToScrobble(response: response)
        }
    }
    
    // MARK: Submit scrobbles
    
    func submitScrobbles(request: Scrobble.SubmitScrobbles.Request) {
        guard request.songs.count > 0, lastFM.isLoggedIn else {
            return
        }
        
        presenter?.presentSubmittingToLastFM()
        
        lastFM.submit(songs: request.songs) {
//            self.database.save(request.songs)
            self.presenter?.presentScrobblingComplete()
        }
    }
    
    // MARK: Get current user
    
    func getCurrentUser() {
        let response = Scrobble.GetCurrentUser.Response(user: lastFM.currentUser)
        presenter?.presentCurrentUser(response: response)
    }
}
