//
//  ScrobbleInteractor.swift
//  SimpleScrob
//
//  Created by Josh Freed on 9/30/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ScrobbleBusinessLogic {
    func refresh(request: Scrobble.Refresh.Request)
}

protocol ScrobbleDataStore {
    //var name: String { get set }
}

class ScrobbleInteractor: ScrobbleBusinessLogic, ScrobbleDataStore {
    var presenter: ScrobblePresentationLogic?
    let mediaLibrary: MediaLibrary

    init(mediaLibrary: MediaLibrary) {
        self.mediaLibrary = mediaLibrary
    }
    
    // MARK: Refresh

    func refresh(request: Scrobble.Refresh.Request) {
        if mediaLibrary.isAuthorized() {
            if mediaLibrary.isInitialized {
                presenter?.presentSearchingForNewScrobbles()
                
                mediaLibrary.searchForNewScrobbles { songs in
                    if songs.count > 0 {
                        // Start submitting the songs to last.fm
                        // Insert the songs to the database to record the last scrobble time and play count
                    } else {
                        // No songs to scrobble
                    }
                    
                    let response = Scrobble.Refresh.Response(currentUserName: nil, songs: songs)
                    self.presenter?.presentSongsToScrobble(response: response)
                }
            } else {
                presenter?.presentScanningMusicLibrary()
                
                mediaLibrary.scanMediaLibrary {
                    let response = Scrobble.Refresh.Response(currentUserName: nil, songs: nil)
                    self.presenter?.presentLibraryScanComplete(response: response)
                }
            }
        } else if mediaLibrary.authorizationDenied() {
            presenter?.presentAuthorizationDenied()
        } else {
            presenter?.presentAuthorizationPrimer()
        }
    }
}
