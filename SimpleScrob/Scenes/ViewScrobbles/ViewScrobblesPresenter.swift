//
//  ViewScrobblesPresenter.swift
//  SimpleScrob
//
//  Created by Josh Freed on 10/8/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CocoaLumberjack

protocol ViewScrobblesPresentationLogic {
    func presentScrobbleHistory(response: ViewScrobbles.GetScrobbleHistory.Response)
}

class ViewScrobblesPresenter: ViewScrobblesPresentationLogic {
    weak var viewController: ViewScrobblesDisplayLogic?

    // MARK: Get scrobble history

    func presentScrobbleHistory(response: ViewScrobbles.GetScrobbleHistory.Response) {
        let df = DateFormatter()
        df.dateFormat = "yyyy-MM-dd HH:mm:ss"
        
        let scrobbles: [ViewScrobbles.DisplayedScrobble] = response.scrobbles.map {
            var imageName: String
            var statusColor: UIColor
            switch $0.status {
            case .scrobbled:
                imageName = "scrobbled"
                statusColor = UIColor(red: 46/255, green: 162/255, blue: 66/255, alpha: 1)
            case .failed:
                imageName = "failed"
                statusColor = .red
            case .notScrobbled:
                imageName = "not-scrobbled"
                statusColor = .lightGray
            case .ignored:
                imageName = "not-scrobbled"
                statusColor = .yellow
            }
            
//            DDLogVerbose("Date Played \(df.string(from: $0.date)), \($0.date.shortTimeAgoSinceNow)")
            
            return ViewScrobbles.DisplayedScrobble(
                artist: $0.artist,
                album: $0.album,
                track: $0.track,
                artwork: $0.artwork?.image(at: CGSize(width: 64, height: 64)),
                datePlayed: $0.date.shortTimeAgoSinceNow,
                statusMessage: makeStatusMessage($0),
                statusImageName: imageName,
                statusColor: statusColor,
                fullDate: df.string(from: $0.date)
            )
        }
        let viewModel = ViewScrobbles.GetScrobbleHistory.ViewModel(scrobbles: scrobbles)
        viewController?.displayScrobbleHistory(viewModel: viewModel)
    }
    
    func makeStatusMessage(_ scrobble: PlayedSong) -> String {
        switch scrobble.status {
        case .scrobbled: return "Scrobbled!"
        case .failed: return scrobble.reason ?? "Error"
        case .notScrobbled:
            if let reason = scrobble.reason {
                return "Not Scrobbled: \(reason)"
            } else {
                return "Not Scrobbled."
            }
        case .ignored:
            return "Ignored: "
        }
    }
}
