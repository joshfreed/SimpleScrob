//
//  ScrobbleInteractorTests.swift
//  SimpleScrob
//
//  Created by Josh Freed on 10/5/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SimpleScrob
import XCTest

class ScrobbleInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: ScrobbleInteractor!
    let mediaLibrary = MockMediaLibrary()
    let worker = MockScrobbleWorker()
    let database = MockDatabase()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupScrobbleInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupScrobbleInteractor() {
        sut = ScrobbleInteractor(
            mediaLibrary: mediaLibrary,
            worker: worker
        )
    }

    // MARK: Test doubles

    class MockScrobbleWorker: ScrobbleWorker {
        init() {
            super.init(database: MockDatabase(), songScanner: MockSongScanner(), scrobbleService: MockScrobbleService())
        }
        
        override func submit(songs: [PlayedSong], completion: @escaping (Error?) -> ()) {
            completion(nil)
        }
    }
    
    class ScrobblePresentationLogicSpy: ScrobblePresentationLogic {
        func presentFirstTimeView(response: Scrobble.Refresh.Response) {
            
        }
        func presentReadyToScrobble(response: Scrobble.Refresh.Response) {
            
        }
        func presentAuthorizationPrimer() {
            
        }
        func presentAuthorizationDenied() {
            
        }
        func presentSearchingForNewScrobbles() {
            
        }
        func presentSongsToScrobble(response: Scrobble.SearchForNewScrobbles.Response) {
            
        }
        func presentSubmittingToLastFM() {
            
        }
        
        var presentScrobblingCompleteCalled = false
        func presentScrobblingComplete(response: Scrobble.SubmitScrobbles.Response) {
            presentScrobblingCompleteCalled = true
        }
        
        func presentCurrentUser(response: Scrobble.GetCurrentUser.Response) {
            
        }
    }

    // MARK: Tests

//    func testSubmitScrobbles() {
//        // Given
//        let spy = ScrobblePresentationLogicSpy()
//        sut.presenter = spy
//        let request = Scrobble.SubmitScrobbles.Request()        
//
//        // When
//        sut.submitScrobbles(request: request)
//
//        // Then
//        XCTAssertTrue(spy.presentScrobblingCompleteCalled, "doSomething(request:) should ask the presenter to format the result")
//    }
}
