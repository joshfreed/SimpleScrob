//
//  ScrobblePresenterTests.swift
//  SimpleScrob
//
//  Created by Josh Freed on 10/5/17.
//  Copyright (c) 2017 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SimpleScrob
import XCTest

class ScrobblePresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: ScrobblePresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupScrobblePresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupScrobblePresenter() {
        sut = ScrobblePresenter()
    }

    // MARK: Test doubles

    class ScrobbleDisplayLogicSpy: ScrobbleDisplayLogic {
        func displayFirstTimeView(viewModel: Scrobble.Refresh.ViewModel) {
            
        }
        
        func displayReadyToScrobble(viewModel: Scrobble.Refresh.ViewModel) {
            
        }
        
        func displayAuthorizationPrimer() {
            
        }
        
        func displayAuthorizationDenied() {
            
        }
        
        func displaySearchingForNewScrobbles() {
            
        }
        
        func displaySongsToScrobble(viewModel: Scrobble.SearchForNewScrobbles.ViewModel) {
            
        }
        
        func displayNoSongsToScrobble() {
            
        }
        
        func displaySubmittingToLastFM() {
            
        }
        
        var displayScrobblineCompleteCalled = false
        func displayScrobblingComplete(viewModel: Scrobble.SubmitScrobbles.ViewModel) {
            displayScrobblineCompleteCalled = true
        }
        
        func displayCurrentUser(viewModel: Scrobble.GetCurrentUser.ViewModel) {
            
        }
    }

    // MARK: Tests

    func testPresentSomething() {
        // Given
        let spy = ScrobbleDisplayLogicSpy()
        sut.viewController = spy
        let response = Scrobble.SubmitScrobbles.Response(error: nil)

        // When
        sut.presentScrobblingComplete(response: response)

        // Then
        XCTAssertTrue(spy.displayScrobblineCompleteCalled, "presentSomething(response:) should ask the view controller to display the result")
    }
}
