//
//  ViewScrobblesPresenterTests.swift
//  SimpleScrob
//
//  Created by Josh Freed on 1/30/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SimpleScrob
import XCTest
import Nimble
import DateToolsSwift

class ViewScrobblesPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: ViewScrobblesPresenter!
    let spy = ViewScrobblesDisplayLogicSpy()
    let dateGenerator = MockDateGenerator()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        continueAfterFailure = false
        setupViewScrobblesPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupViewScrobblesPresenter() {
        sut = ViewScrobblesPresenter()
        sut.viewController = spy
        sut.dateGenerator = dateGenerator
    }

    // MARK: Test doubles

    class ViewScrobblesDisplayLogicSpy: ViewScrobblesDisplayLogic {
        var displayScrobbleHistoryCalled = false
        var displayScrobbleHistoryViewModel: ViewScrobbles.GetScrobbleHistory.ViewModel?

        func displayScrobbleHistory(viewModel: ViewScrobbles.GetScrobbleHistory.ViewModel) {
            displayScrobbleHistoryCalled = true
            displayScrobbleHistoryViewModel = viewModel
        }
    }

    // MARK: Tests

    func testPresentScrobbleHistory() {
        // Given
        dateGenerator.now = Date(dateString: "2018-01-30 11:15:00", format: "yyyy-MM-dd HH:mm:ss")
        let scrobbles: [PlayedSong] = [
            PlayedSongBuilder
                .aSong()
                .playedAt(dateGenerator.now.subtract(17.hours))
                .with(artist: "The Dear Hunter")
                .with(album: "All Is As All Should Be")
                .with(track: "The Right Wrong")
                .with(status: .notScrobbled)
                .build(),
            PlayedSongBuilder
                .aSong()
                .playedAt(dateGenerator.now.subtract(2.days))
                .with(artist: "The Dear Hunter")
                .with(album: "Migrant")
                .with(track: "Bring You Down")
                .with(status: .scrobbled)
                .build()
        ]
        let expected1 = ViewScrobbles.DisplayedScrobble(
            artist: "The Dear Hunter",
            album: "All Is As All Should Be",
            track: "The Right Wrong",
            artwork: nil,
            datePlayed: "17h",
            statusMessage: "Not Scrobbled.",
            statusImageName: "not-scrobbled",
            statusColor: .lightGray,
            fullDate: ""
        )
        let expected2 = ViewScrobbles.DisplayedScrobble(
            artist: "The Dear Hunter",
            album: "Migrant",
            track: "Bring You Down",
            artwork: nil,
            datePlayed: "2d",
            statusMessage: "Scrobbled!",
            statusImageName: "scrobbled",
            statusColor: sut.scrobbledColor,
            fullDate: ""
        )
        let response = ViewScrobbles.GetScrobbleHistory.Response(scrobbles: scrobbles, reachedEndOfItems: false)

        // When
        sut.presentScrobbleHistory(response: response)

        // Then
        XCTAssertTrue(spy.displayScrobbleHistoryCalled, "presentScrobbleHistory(response:) should ask the view controller to display the result")
        verify(expected: expected1, equals: spy.displayScrobbleHistoryViewModel?.scrobbles[0])
        verify(expected: expected2, equals: spy.displayScrobbleHistoryViewModel?.scrobbles[1])
    }
    
    func testPresentScrobbleHistory_ignoredSong() {
        // Given
        dateGenerator.now = Date(dateString: "2018-01-30 11:15:00", format: "yyyy-MM-dd HH:mm:ss")
        let song = PlayedSongBuilder
            .aSong()
            .playedAt(dateGenerator.now.subtract(17.hours))
            .with(status: .ignored, because: "This track is vague")
            .build()
        let scrobbles: [PlayedSong] = [song, PlayedSongBuilder.aSong().with(status: .ignored).build()]
        let expected1 = ViewScrobbles.DisplayedScrobble(
            artist: song.artist,
            album: song.album,
            track: song.track,
            artwork: nil,
            datePlayed: "17h",
            statusMessage: "Ignored: This track is vague",
            statusImageName: "ignored",
            statusColor: sut.ignoredColor,
            fullDate: ""
        )
        let response = ViewScrobbles.GetScrobbleHistory.Response(scrobbles: scrobbles, reachedEndOfItems: false)
        
        // When
        sut.presentScrobbleHistory(response: response)
        
        // Then
        XCTAssertTrue(spy.displayScrobbleHistoryCalled, "presentScrobbleHistory(response:) should ask the view controller to display the result")
        verify(expected: expected1, equals: spy.displayScrobbleHistoryViewModel?.scrobbles[0])
        expect(self.spy.displayScrobbleHistoryViewModel?.scrobbles[1].statusMessage).to(equal("Ignored by Last.fm"))
    }
    
    //
    // Helper funcs
    //
    
    func verify(expected: ViewScrobbles.DisplayedScrobble, equals actual: ViewScrobbles.DisplayedScrobble?) {
        expect(actual).toNot(beNil())
        guard let actual = actual else {
            return
        }
        
        expect(actual.artist).to(equal(expected.artist))
        expect(actual.album).to(equal(expected.album))
        expect(actual.track).to(equal(expected.track))
        expect(actual.datePlayed).to(equal(expected.datePlayed))
        expect(actual.statusMessage).to(equal(expected.statusMessage))
        expect(actual.statusImageName).to(equal(expected.statusImageName))
        expect(actual.statusColor).to(equal(expected.statusColor))
    }
}
